// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_expires_in Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@unique([provider, userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String?
  bases    Base[]

  // nextauth is a pile of shit
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?

  accounts Account[]
  sessions Session[]
}

model Base {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  airtable       String  @unique
  userId         String
  name           String
  domain         String?
  theme          String?
  seoDescription String?
  seoImage       String?
  tables         Table[]

  user User @relation(fields: [userId], references: [id])
}

model Table {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  airtable       String  @unique
  baseId         String
  name           String
  description    String
  theme          String?
  seoDescription String?
  seoImage       String?

  forms  Form[]
  fields Field[]

  base Base @relation(fields: [baseId], references: [id])
}

model Form {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tableId        String
  fields         FieldsOnForms[]
  title          String?
  description    String?
  slug           String?
  seoDescription String?
  seoImage       String?
  headerImage    String?
  connectWallet  Boolean         @default(false)
  theme          String?
  submitMsg      String?
  contraints     String?
  coverImage     String?

  table Table @relation(fields: [tableId], references: [id])
}

model Field {
  id String @id

  tableId     String
  type        FieldTypeEnum
  name        String
  description String?
  options     Json?

  forms FieldsOnForms[]

  table Table @relation(fields: [tableId], references: [id])
}

model FieldsOnForms {
  fieldId String
  formId  String
  index   Int
  form    Form   @relation(fields: [formId], references: [id])
  field   Field  @relation(fields: [fieldId], references: [id])

  @@id([fieldId, formId])
}

enum FieldTypeEnum {
  checkbox
  currency
  multipleAttachments
  duration
  url
  multilineText
  singleLineText
  phoneNumber
  percent
  number
  multipleSelects
  date
  rating
  email
  singleSelect
}
